<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_hitbox</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_player_hitbox</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Init Variables
doubleJumpAvailable = false;
superJumpAvailable = false;
jumpPower = 7.5;
doubleJumpPower = 7;
gravity_direction = 270;
gravity = 0.4;
maxFallSpeed = 9;
maxRunSpeed = 3;
maxCrouchSpeed = 1.5;
playerFacing = 1;
shotCount = 0;
crouching = false;
running = 0;    // 0 = not running, 1 = running left, -1 = running right
croM = false;
looking = 0;    // 0 = not looking up or down, 1 = looking up, -1 = looking down
shooting = false;
onPlatform = false;
frozen = false;
wasOnGround = false;
playedSittingSound = false;
slip = 0;
sliding = false;
slideForce = 8;
slideCur = 0;

legsSpr = spr_player_legs_idle;
legsIndex = 0;
legsSpeed = 1/5;
legsVisible = true;

bodySpr = spr_player_body_idle;
bodyIndex = 0;
bodySpeed = 1/5;
bodyVisible = true;

if (global.autosave) //save the game if currently set to autosave
{
    save_game(true);
    global.autosave = false;
}




// Create Cape
if (!instance_exists(obj_player_cape))
{
    instance_create(x,y,obj_player_cape);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Directional Shooting

//Shooting Right
//if (shootDir == 0) {
    if (shotCount &lt;= 3) {
        sound_play(sndPlayerShot);
        shooting = true;
        shotCount += 1
        proj = instance_create(x+(8*playerFacing), y-11, obj_player_bullet);
        
        var shootDir;
        
        if (looking == 1)
            shootDir = 90;
        else if (looking == -1)
            shootDir = 270;
        else {
            if (playerFacing == 1)
                shootDir = 0;
            else
                shootDir = 180;
        }
        
        //if crouching freeze the player
        if (crouching == true)
        {
            running = 0;
            
            //if sliding, don't freeze or stop his movement
            if (sliding == false)
            {
                vspeed = 0;
                hspeed = 0;
                frozen = true
            }
        }
        
        if (sliding == true)
        {
            if (playerFacing == 1)
                shootDir = 0;
            else
                shootDir = 180;
        }
        
        proj.direction = shootDir
        proj.speed = 12;
        if (shootDir == 0) or (shootDir == 180) {
        sprite_change_body(spr_player_body_shoot,1/3);
        } else if (shootDir == 90) {
        sprite_change_body(spr_player_body_shoot_up, 1/3);
        } else {
        sprite_change_body(spr_player_body_shoot_down, 1/3);
        }
        alarm[0] = 7;
    } else {
        frozen = false;
        shooting = false;
        shotCount = 0
    }
//}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sprites &amp; Animation

var onBlock = place_meeting(x,y+1,obj_block);

//check if the player is no longer on a platform
if (onPlatform &amp;&amp; !place_meeting(x,y+1,obj_platform))
{
    onPlatform = false;
    //vspeed = 0;
}

var onGround = (onBlock || onPlatform);

//set sprites

//legs
if (!onGround){
    sprite_change_legs(spr_player_legs_jump,0);
}
else {
    if (running != 0)
        sprite_change_legs(spr_player_legs_run, 1/4);
    else
        sprite_change_legs(spr_player_legs_idle, 0);
}

legsVisible = !crouching;
legsVisible = !sliding;

//body
//sliding
if (sliding)
{
    sprite_change_body(spr_player_body_sliding, 0);
}

//looking up
else if (looking == 1) &amp;&amp; (!shooting)
{
    sprite_change_body(spr_player_body_shoot_up, 0);
}

//looking up and shooting
else if (looking == 1) &amp;&amp; (shooting)
{
    sprite_change_body(spr_player_body_shoot_up, 1/4);
}

//looking down
else if (looking == -1) &amp;&amp; (!shooting)
{
    sprite_change_body(spr_player_body_shoot_down, 0);
}

//looking down and shooting
else if (looking == -1) &amp;&amp; (shooting)
{
    sprite_change_body(spr_player_body_shoot_down, 1/4);
}

//looking left or right and shooting
else if (abs(playerFacing) == 1) &amp;&amp; (shooting == true) &amp;&amp; (!crouching)
{
    sprite_change_body(spr_player_body_shoot, 1/2);
}

//crouching moving left or right
else if (abs(running) == 1) &amp;&amp; (!shooting) &amp;&amp; (crouching)
{
    sprite_change_body(spr_player_body_crouch, 1/4);
}

//crouching shooting
else if (crouching) &amp;&amp; (!running) &amp;&amp; (shooting)
{
    sprite_change_body(spr_player_body_crouch_shoot, 1/4);
}

//crouching idle
else if (crouching) &amp;&amp; (!running) &amp;&amp; (!shooting)
{
    sprite_change_body(spr_player_body_crouch_idle, 0);
}

//idle
else
{
    sprite_change_body(spr_player_body_idle, 1/4);
}

//animate
legsIndex = (legsIndex + legsSpeed) mod sprite_get_number(legsSpr);
bodyIndex = (bodyIndex + bodySpeed) mod sprite_get_number(bodySpr);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Button Inputs &amp; Movement

//check button presses
var L = keyboard_check(global.leftbutton);
var R = keyboard_check(global.rightbutton);
var U = keyboard_check(global.upbutton);
var D = keyboard_check(global.downbutton);

var onBlock = place_meeting(x,y+1,obj_block);
var notOnBlock = place_free(x,y+1);
var slipBlockTouching = instance_place(x,y+12,obj_block_slip);   //check if near a slip block
var platformTouching = instance_place(x, y+1, obj_platform);

//check if the player is no longer on a platform
if (onPlatform &amp;&amp; !place_meeting(x,y+1,obj_platform))
{
    onPlatform = false;
}

var onGround = (onBlock || onPlatform);

if (frozen == false)
{

//looking up/down
if (U)
{
    if ((!crouching &amp;&amp; looking != -1) || !D)
        looking = 1;
}

if (D)
{
    if (looking != 1 || !U)
    {
        if (!onGround)   //in air, look down
            looking = -1;
        else    //on block, crouch
        {
            looking = 0;
            crouching = true;
            mask_index = spr_player_hitbox_small;
        }
    }
}

if (!U &amp;&amp; !D)
    looking = 0;    

//uncrouching
if (crouching &amp;&amp; (!D || !onGround)) {
    crouching = false;
    playedSittingSound = false;
    mask_index = spr_player_hitbox;
    
    if (place_meeting(x,y,obj_block)) //recrouch if under a wall
    {
        looking = 0;
        crouching = true;
        mask_index = spr_player_hitbox_small;
    }
}

//slipping
if (running != 0)
{
    if (slipBlockTouching != noone)
    {
        if ((running == 1 &amp;&amp; hspeed &lt; maxRunSpeed) || (running == -1 &amp;&amp; hspeed &gt; -maxRunSpeed))
        hspeed += (slipBlockTouching.slip) * running;
    }
}
else
{
    if (slipBlockTouching == noone)
        hspeed = 0;
    else
    {
        if (hspeed &gt; 0)
        {
            hspeed -= slipBlockTouching.slip;
            
            if (hspeed &lt;= 0)
                hspeed = 0;
        }
        else if (hspeed &lt; 0)
        {
            hspeed += slipBlockTouching.slip;
            
            if (hspeed &gt;= 0)
                hspeed = 0;
        }
    }
}

if (slipBlockTouching == noone) and not (onPlatform)
    hspeed = 0;
    
//sliding
if (crouching) &amp;&amp; (keyboard_check_pressed(global.jumpbutton)) &amp;&amp; (!sliding)
{
    slideCur = slideForce;
    sliding = true;
    hspeed += slideCur * playerFacing
}

if (sliding == true)
{
    slideCur -= 0.25;
    
    hspeed += slideCur * playerFacing
    
    if (slideCur &lt;= 0)
        sliding = false;
}

//conveyors
var slideBlockTouching = instance_place(x,y+1,obj_block_conveyor);   //check if on a slide block

if (slideBlockTouching != noone)    //on a slide block, start moving with it
    hspeed += slideBlockTouching.spd;
    
//moving left/right
if (L)
{
    if (running != 1 || !R)
    {
        running = -1;
        playerFacing = running;
    }
}

if (R)
{
    if (running != -1 || !L)
    {
        running = 1;
        playerFacing = running;
    }
}

if (!L &amp;&amp; !R)
{
    running = 0;
}

var horSpeed = 0;
if (crouching) and (not sliding)
    horSpeed = maxCrouchSpeed;
else if (not crouching) and (not sliding)
    horSpeed = maxRunSpeed;

if not onPlatform and not sliding
    hspeed += running * horSpeed

if (slipBlockTouching != noone)
    hspeed = clamp(hspeed, -maxRunSpeed*2, maxRunSpeed*2)

//platform (mirror of what's found in the collision event for objPlatform)
if (onPlatform) and (not sliding)
{
    if (platformTouching != noone)
    {
        if (vspeed &gt;= 0 &amp;&amp; (yprevious &lt;= platformTouching.yprevious-13 || onPlatform)) //make sure player is falling and landing directly on the platform
        {
            y = platformTouching.y-17; //snap to platform
            vspeed = max(other.vspeed,0); //other.vspeed;  //move with the platform
            hspeed = platformTouching.hspeed+running*maxRunSpeed
            onPlatform = true;
            doubleJumpAvailable = true;
        }
    }
}

//slopes
if (instance_exists(obj_slope) &amp;&amp; hspeed != 0)
{
    var moveLimit = abs(hspeed)*2;    //sets how high/low the player can go to snap onto a slope, this can be increased to make the player able to run over steeper slopes (ie setting it to abs(hspeed)*2 allows the player to run over slopes twice as steep)
    
    var slopeCheck;
    var hTest;
    
    var ySlope;
    
    //falling onto a slope
    if (place_meeting(x+hspeed,y+vspeed+gravity,obj_slope) &amp;&amp; (vspeed+gravity)*1 &gt; 0 &amp;&amp; notOnBlock)
    {
        var xLast = x;
        var yLast = y;
        var hLast = hspeed;
        var vLast = vspeed;
        
        vspeed += gravity;
        
        x += hspeed;
        hspeed = 0;
        
        if(!place_free(x,y+vspeed))
        {
            if (1 == 1)   //normal
                move_contact_solid(270,abs(vspeed));
            else    //flipped
                move_contact_solid(90,abs(vspeed));
            vspeed = 0;
        }
        
        y += vspeed;            
        
        if (!place_free(x,y+(1)) &amp;&amp; place_free(x,y))  //snapped onto the slope properly
        {
            doubleJumpAvailable = true;
            notOnBlock = false;
        }
        else    //did not snap onto the slope, return to previous position
        {
            x = xLast;
            y = yLast;
            hspeed = hLast;
            vspeed = vLast;
        }
    }
    
    //moving down a slope
    if (!notOnBlock)
    {
        var onSlope = (place_meeting(x,y+(1),obj_slope));    //treat normal blocks the same as slopes if we're standing on a slope
        
        slopeCheck = true;
        hTest = hspeed;
        
        while (slopeCheck)
        {
            ySlope = 0;
            //check how far we should move down
            while ((!place_meeting(x+hTest,y-ySlope+(1),obj_slope) || (onSlope &amp;&amp; !place_meeting(x+hTest,y-ySlope+(1),obj_block))) &amp;&amp; ySlope*1 &gt; -floor(moveLimit*(hTest/hspeed)))
            {
                ySlope -= 1;
            }
            
            //check if we actually need to move down
            if (place_meeting(x+hTest,y-ySlope+(1),obj_slope) || (onSlope &amp;&amp; place_meeting(x+hTest,y-ySlope+(1),obj_block)))
            {
                if (ySlope != 0 &amp;&amp; !place_meeting(x+hTest,y-ySlope,obj_block))
                {
                    y -= ySlope;
                    
                    x += hTest;
                    hspeed = 0;
                    
                    slopeCheck = false;
                }
                else
                {
                    if (hTest &gt; 0)
                    {
                        hTest -= 1;
                        if (hTest &lt;= 0)
                            slopeCheck = false;
                    }
                    else if (hTest &lt; 0)
                    {
                        hTest += 1;
                        if (hTest &gt;= 0)
                            slopeCheck = false;
                    }
                    else
                    {
                        slopeCheck = false;
                    }
                }
            }
            else
            {
                slopeCheck = false;
            }
        }
    }
    
    //moving up a slope
    if (place_meeting(x+hspeed,y,obj_slope))
    {
        slopeCheck = true;
        hTest = hspeed;
        
        while (slopeCheck)
        {
            ySlope = 0;
            
            //check how far we have to move up
            while (place_meeting(x+hTest,y-ySlope,obj_slope) &amp;&amp; ySlope*1 &lt; floor(moveLimit*(hTest/hspeed)))
            {
                ySlope += 1;
            }
            
            //check if we actually need to move up
            if (place_free(x+hTest,y-ySlope))
            {            
                y -= ySlope;
                
                x += hTest;
                hspeed = 0;
                
                slopeCheck = false;
            }
            else
            {
                if (hTest &gt; 0)
                {
                    hTest -= 1;
                    if (hTest &lt;= 0)
                        slopeCheck = false;
                }
                else if (hTest &lt; 0)
                {
                    hTest += 1;
                    if (hTest &gt;= 0)
                        slopeCheck = false;
                }
                else
                {
                    slopeCheck = false;
                }
            }
        }
    }
    
    //set xprevious/yprevious coordinates for future solid collisions
    xprevious = x;
    yprevious = y;
}

//Walking &amp; Crouching Sound Effect
if (onGround)
{
    if (running == 1) || (running == -1)
    {
        if (crouching == false)
        {
            if (!sound_isplaying(sndWalking))
            {
                sound_play(sndWalking);
            }
        }
        else
        {
            if (!sound_isplaying(sndCrouching))
            {
                sound_play(sndCrouching);
            }
        }
    }
}

//landing sound effect
if (wasOnGround == true)
{
    if (onGround == true)
    {
        wasOnGround = false;
        sound_play(sndLanding)
    }
}

//sitting sound effect
if (playedSittingSound == false)
{
    if (crouching == true)
    {
        playedSittingSound = true;
        sound_play(sndSit)
    }
}

//Limiters

if vspeed &gt; maxFallSpeed {vspeed = maxFallSpeed;}

if keyboard_check_pressed(global.jumpbutton) &amp;&amp; (!sliding) { //Press Jump
        playerJumpScript();
    }
    
if keyboard_check_released(global.jumpbutton){ //Releasing Jump
        playerVJumpScript();
    }
    
if keyboard_check_pressed(global.shootbutton){ //Pressing Shoot
        if (!alarm[0]) {alarm[0] = 1}
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_goal_boundary">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (frozen == false) 
{
    frozen = true;
    hspeed = 0;
    vspeed = 0;
    running = 0;
    nxt_rm = instance_create(view_xview[0], view_yview[0], obj_darken_screen);
    nxt_rm.roomTo = other.roomTo;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_killer">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>killPlayer();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_platform">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (vspeed &gt;= 0 &amp;&amp; (yprevious &lt;= other.yprevious-13 || onPlatform))    //make sure player is falling and landing directly on the platform
{
    y = other.y-17; //snap to platform
    vspeed = max(other.vspeed,0); //other.vspeed;  //move with the platform
    hspeed = other.hspeed+running*maxRunSpeed
    onPlatform = true;
    doubleJumpAvailable = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_block">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Check for Horizontal Solids
if(place_free(x+hspeed,y) == false){
  if(hspeed &lt;= 0){
    move_contact_solid(180,abs(hspeed));
  }
  if(hspeed &gt; 0){
    move_contact_solid(0,abs(hspeed));
  }
  hspeed = 0;
}

// Check of Vertical Solids
if(place_free(x,y+vspeed) == false){
  if(vspeed &lt;= 0){
    move_contact_solid(90,abs(vspeed));
  }
  if(vspeed &gt; 0){
    move_contact_solid(270,abs(vspeed));
    doubleJumpAvailable = true;
    superJumpAvailable = false;
  }
  vspeed = 0;
}

// Check for Horizontal + Vertical Solids
if (place_free(x+hspeed,y+vspeed) == false){
    hspeed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Appearance
if (legsVisible)
    draw_sprite_ext(legsSpr,legsIndex,x,y,image_xscale*playerFacing,image_yscale,image_angle,image_blend,image_alpha);
if (bodyVisible)
    draw_sprite_ext(bodySpr,bodyIndex,x,y-1,image_xscale*playerFacing,image_yscale,image_angle,image_blend,image_alpha);
    
//draw_sprite_ext(mask_index,image_index,x,y,image_xscale,image_yscale,image_angle,image_blend,0.75);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
